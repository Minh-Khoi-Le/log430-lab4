openapi: 3.0.0
info:
  title: Multi-Stores API
  version: 1.0.0
  description: API for managing multi-store operations, including products, stores, sales, users, and parent company management
servers:
  - url: http://localhost:3000/api/v1
    description: Development server
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    Product:
      type: object
      required: [id, nom, prix]
      properties:
        id:
          type: integer
          example: 1
        nom:
          type: string
          example: "Product Name"
        prix:
          type: number
          format: float
          example: 99.99
        description:
          type: string
          example: "Product description"
    Store:
      type: object
      required: [id, nom]
      properties:
        id:
          type: integer
          example: 1
        nom:
          type: string
          example: "Store Name"
        adresse:
          type: string
          example: "123 Main Street"
    User:
      type: object
      required: [id, nom, role]
      properties:
        id:
          type: integer
          example: 1
        nom:
          type: string
          example: "User Name"
        role:
          type: string
          enum: [client, gestionnaire]
          example: "client"
    Sale:
      type: object
      required: [magasinId, userId]
      properties:
        id:
          type: integer
          example: 1
        magasinId:
          type: integer
          example: 1
        userId:
          type: integer
          example: 1
        date:
          type: string
          format: date-time
        lignes:
          type: array
          items:
            type: object
            properties:
              producId:
                type: integer
              quantite:
                type: integer
              prixUnitaire:
                type: number
        total:
          type: number
          format: float
    Error:
      type: object
      properties:
        timestamp:
          type: string
          format: date-time
        status:
          type: integer
        error:
          type: string
        message:
          type: string
        path:
          type: string
paths:
  /products:
    get:
      summary: List products
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            default: 1
        - name: size
          in: query
          schema:
            type: integer
            default: 10
        - name: sort
          in: query
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product'
    post:
      summary: Create a new product
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Product'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
  /products/{id}:
    get:
      summary: Get a product by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
    put:
      summary: Update a product
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Product'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
    delete:
      summary: Delete a product
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: No content
  
  # Store routes
  /stores:
    get:
      summary: List all stores
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Store'
    post:
      summary: Create a new store
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Store'
      responses:
        '201':
          description: Created
  
  /stores/{id}:
    get:
      summary: Get store details by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: OK
    put:
      summary: Update store information
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: OK
    delete:
      summary: Delete a store
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: No content
  
  /stores/{magasinId}/stock:
    get:
      summary: Get stock levels for a specific store
      parameters:
        - name: magasinId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: OK
  
  # Sales routes
  /sales:
    get:
      summary: List all sales
      responses:
        '200':
          description: OK
    post:
      summary: Create a new sale
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Sale'
      responses:
        '201':
          description: Created
  
  /sales/user/{userId}:
    get:
      summary: Get sales for a specific user
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: OK
  
  # User routes
  /users:
    get:
      summary: List all users
      responses:
        '200':
          description: OK
    post:
      summary: Create a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                nom:
                  type: string
                role:
                  type: string
                  enum: [client, gestionnaire]
                password:
                  type: string
      responses:
        '201':
          description: Created
  
  /users/login:
    post:
      summary: Authenticate a user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                nom:
                  type: string
                password:
                  type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  
  /users/{id}:
    get:
      summary: Get user details by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: OK
  
  /users/{id}/ventes:
    get:
      summary: Get sales history for a user
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: OK
  
  # Maisonmere routes
  /maisonmere/stats:
    get:
      summary: Get performance statistics for all stores
      responses:
        '200':
          description: OK
  
  /maisonmere/ventes-consolidees:
    get:
      summary: Get consolidated sales data across all stores
      parameters:
        - name: debut
          in: query
          schema:
            type: string
            format: date
        - name: fin
          in: query
          schema:
            type: string
            format: date
      responses:
        '200':
          description: OK
  
  # Health check endpoint
  /health:
    get:
      summary: API health check
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "ok" 